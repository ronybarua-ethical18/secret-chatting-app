{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/GlobalMessage.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","file","float","marginRight","color","backgroundColor","GlobalMessage","lastMessage","isMyFirstMessage","sender","username","backgroundImage","avatar","src","alt","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","renderMessages","keys","Object","key","lastMessageKey","width","title","height","LoginForm","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","action","required","align","App","getItem","projectID","userSecret","renderChatFeed","ChatAppProps","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b0f9976.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { sendMessage, isTyping } from 'react-chat-engine';\r\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\r\nconst MessageForm = (props) => {\r\n    const [value, setValue] = useState('');\r\n    const { chatId, creds } = props;\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const text = value.trim();\r\n        if (text.length > 0) {\r\n            sendMessage(creds, chatId, { text });\r\n        }\r\n        setValue('');\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n        isTyping(props, chatId);\r\n    };\r\n\r\n    const handleUpload = (event) =>{\r\n        sendMessage(creds, chatId, {files: event.target.files, text: ''})\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form className=\"message-form\" onSubmit={handleSubmit}>\r\n                <input\r\n                    className=\"message-input\"\r\n                    placeholder=\"Enter your message...\"\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    onSubmit={handleSubmit}\r\n                />\r\n                <label htmlFor=\"upload-button\">\r\n                    <span className=\"image-button\">\r\n                        <PictureOutlined className=\"picture-icon\" />\r\n                    </span>\r\n                </label>\r\n                <input type=\"file\" \r\n                multiple= {false}\r\n                id= \"upload-button\"\r\n                style={{display: 'none'}}\r\n                onChange={handleUpload}\r\n                />\r\n                <button type=\"submit\" className=\"submit-button\">\r\n                    <SendOutlined className=\"send-icon\"/>\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\nexport default MessageForm;","const MyMessage = ({message}) =>{\r\n    if(message?.attachments?.length > 0){\r\n        <img\r\n            src={message.attachments[0].file}\r\n            alt=\"message-attachments\"\r\n            className=\"messgae-image\"\r\n            style={{float: 'right'}}\r\n        />\r\n    }\r\n    return(\r\n        <div className=\"message\" style={{float:'right', marginRight: '15px', color: 'white', backgroundColor:'#3B2A50'}}>\r\n           {message.text}\r\n        </div>\r\n    )\r\n}\r\nexport default MyMessage;","const GlobalMessage = ({ lastMessage, message }) => {\r\n    const isMyFirstMessage = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n    return (\r\n        <div className=\"message-row\">\r\n            {isMyFirstMessage && (\r\n                <div className=\"message-avatar\"\r\n                    style={{ backgroundImage: `url(${message?.sender?.avatar})` }}\r\n                />\r\n            )}\r\n            {\r\n                message?.attachments?.length > 0 ? (\r\n                    <img\r\n                        src={message.attachments[0].file}\r\n                        alt=\"message-attachments\"\r\n                        className=\"messgae-image\"\r\n                        style={{ marginLeft: isMyFirstMessage? '4px' : '48px' }}\r\n                    />\r\n                ) : (\r\n                        <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC', marginLeft: isMyFirstMessage? '4px' : '48px' }}>\r\n                            {message.text}\r\n                        </div>\r\n                    )\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default GlobalMessage;","import MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport GlobalMessage from './GlobalMessage';\r\n\r\nconst ChatFeed = (props) => {\r\n    const { chats, activeChat, userName, messages } = props;\r\n    // console.log(props);\r\n    const chat = chats && chats[activeChat];\r\n    // console.log(chat, userName, messages);\r\n\r\n    const renderReadReceipts = (message, isMyMessage) =>{\r\n        return chat.people.map((person, index) => person.last_read === message.id && (\r\n            <div \r\n            key={`read-${index}`}\r\n            className=\"read-receipt\"\r\n            style={{float: isMyMessage? 'right' : 'left',\r\n                    backgroundImage: `url(${person?.person?.avatar})` \r\n                }}\r\n            />\r\n        ))\r\n    };\r\n    const renderMessages = () => {\r\n\r\n        const keys = Object.keys(messages); //keys are id's of specific messages\r\n        // console.log(keys);\r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n            const isMyMessage = userName === message.sender.username;\r\n\r\n            return (\r\n                <div key={`msg-${index}`} style={{ width: '100%' }}>\r\n                    <div className=\"message-block\">\r\n                        {\r\n                            isMyMessage ? \r\n                            <MyMessage message={message}/> \r\n                            :<GlobalMessage message={message} lastMessage ={messages[lastMessageKey]}/>\r\n                        }\r\n                    </div>\r\n                    <div className=\"read-receipts\"\r\n                        style={{\r\n                            marginRight: isMyMessage ? '18px' : '0px',\r\n                            marginLeft: isMyMessage ? '0px' : '68px'\r\n                        }}>\r\n                       {renderReadReceipts(message, isMyMessage)}\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        })\r\n    }\r\n    renderMessages();\r\n    if (!chat) return  <div />;\r\n    return (\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">\r\n                    {\r\n                        chat?.title\r\n                    }\r\n                </div>\r\n                <div className=\"chat-subtitle\">\r\n                    {\r\n                        chat.people.map((person) => `${person.person.username}`)\r\n                    }\r\n                </div>\r\n                {renderMessages()}\r\n                <div style={{height:'100px'}}/>\r\n                <div className=\"message-form-container\">\r\n                    <MessageForm {...props} chatId ={activeChat}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ChatFeed;","import {useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst LoginForm = () =>{\r\n    const[username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n    \r\n\r\n    const handleSubmit = async (e) =>{\r\n        e.preventDefault();\r\n    \r\n        const authObject = {'Project-ID': \"b5886952-5a76-48fa-9169-9abdc68fa6ee\", 'User-Name': username, \"User-Secret\": password};\r\n        try {\r\n            await axios.get('https://api.chatengine.io/chats', {headers: authObject});\r\n            localStorage.setItem('username', username);\r\n            localStorage.setItem('password', password);\r\n\r\n            window.location.reload();\r\n        } catch (error) {\r\n            setError('Oops, something went wrong');\r\n        }\r\n        //username / password -> chat engine-> give message\r\n        //works out -> logged in\r\n        //error -> try with new credentials\r\n    }\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n               <h1 className=\"title\">Chat Application</h1>\r\n                <form onSubmit={handleSubmit} action=\"\">\r\n                    <input type=\"text\" value={username} \r\n                    onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required/>\r\n                     <input type=\"password\" value={password} \r\n                    onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required/>\r\n\r\n                    <div align=\"center\">\r\n                        <button type=\"submit\" className=\"button\">\r\n                        <span>Start Chatting</span>\r\n                        </button>\r\n                    </div>\r\n                    <h2 className=\"error\">{error}</h2>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default LoginForm;","import {ChatEngine} from 'react-chat-engine';\r\nimport './App.css';\r\nimport ChatFeed from './components/ChatFeed';\r\nimport LoginForm from './components/LoginForm';\r\n\r\nconst App = () =>{\r\n    if(!localStorage.getItem('username')){\r\n        return <LoginForm/>\r\n    }\r\n    return (\r\n        <ChatEngine\r\n            height = \"100vh\"\r\n            projectID = \"b5886952-5a76-48fa-9169-9abdc68fa6ee\"\r\n            userName = {localStorage.getItem('username')}\r\n            userSecret = {localStorage.getItem('password')} //password\r\n            renderChatFeed ={(ChatAppProps) => <ChatFeed {...ChatAppProps}/>}\r\n        />\r\n    )\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport App from './App';\r\nReactDom.render(<App />, document.getElementById('root'));"],"sourceRoot":""}